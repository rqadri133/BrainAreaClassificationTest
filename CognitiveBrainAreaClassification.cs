using System;
using System.Collections.Generic;
using Microsoft.ML;
using Microsoft.ML.Data;

/// <summary>
///  All Code Generated by ChatGPT 
/// A new beggining of me being slave of Chat GPT
/// </summary>
namespace CognitiveBrainAreaClassification
{
    public class BrainAreaData
    {
        [LoadColumn(0)]
        public float SignalIntensity1 { get; set; }

        [LoadColumn(1)]
        public float SignalIntensity2 { get; set; }

        [LoadColumn(2)]
        public float SignalIntensity3 { get; set; }

        [LoadColumn(3)]
        public float SignalIntensity4 { get; set; }

        // The label (area classification) for training, not used during inference
        [LoadColumn(4)]
        public string AreaLabel { get; set; }
    }

    public class BrainAreaPrediction
    {
        [ColumnName("PredictedLabel")]
        public string PredictedArea { get; set; }

        public float[] Score { get; set; }
    }

    public class CognitiveBrainAreaClassifier
    {
        private readonly MLContext _mlContext;
        private PredictionEngine<BrainAreaData, BrainAreaPrediction> _predictionEngine;

        public CognitiveBrainAreaClassifier()
        {
            _mlContext = new MLContext(seed: 0);
        }

        public void Train(string dataPath, string modelPath)
        {
            // Step 1: Load data
            IDataView data = _mlContext.Data.LoadFromTextFile<BrainAreaData>(
                dataPath, hasHeader: true, separatorChar: ',');

            // Step 2: Define data preparation and training pipeline
            var pipeline = _mlContext.Transforms.Conversion.MapValueToKey("Label", "AreaLabel")
                .Append(_mlContext.Transforms.Concatenate("Features", "SignalIntensity1", "SignalIntensity2", "SignalIntensity3", "SignalIntensity4"))
                .Append(_mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy("Label", "Features"))
                .Append(_mlContext.Transforms.Conversion.MapKeyToValue("PredictedLabel"));

            // Step 3: Train the model
            Console.WriteLine("Training the model...");
            var model = pipeline.Fit(data);

            // Step 4: Save the trained model
            _mlContext.Model.Save(model, data.Schema, modelPath);
            Console.WriteLine($"Model saved to {modelPath}");
        }

        public void LoadModel(string modelPath)
        {
            // Load the trained model
            var model = _mlContext.Model.Load(modelPath, out var inputSchema);
            _predictionEngine = _mlContext.Model.CreatePredictionEngine<BrainAreaData, BrainAreaPrediction>(model);
            Console.WriteLine($"Model loaded from {modelPath}");
        }

        public string ClassifyBrainArea(float signal1, float signal2, float signal3, float signal4)
        {
            if (_predictionEngine == null)
            {
                throw new InvalidOperationException("Model is not loaded. Call LoadModel() before ClassifyBrainArea().");
            }

            // Create input data
            var inputData = new BrainAreaData
            {
                SignalIntensity1 = signal1,
                SignalIntensity2 = signal2,
                SignalIntensity3 = signal3,
                SignalIntensity4 = signal4
            };

            // Perform prediction
            var prediction = _predictionEngine.Predict(inputData);

            Console.WriteLine($"Predicted Area: {prediction.PredictedArea}");
            return prediction.PredictedArea;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // you have to provide classifcation here for 
            // Each abstract implementation has a test first
            // File paths
            string trainingDataPath = "brain_area_data.csv"; // Training data file path
            string modelPath = "BrainAreaClassificationModel.zip"; // Path to save the model

            // Initialize classifier
            var classifier = new CognitiveBrainAreaClassifier();

            // Train and save the model
            classifier.Train(trainingDataPath, modelPath);

            // Load the model
            classifier.LoadModel(modelPath);

            // Classify a sample brain signal
            var predictedArea = classifier.ClassifyBrainArea(0.8f, 1.2f, 0.5f, 1.0f);
            Console.WriteLine($"The predicted cognitive brain area is: {predictedArea}");
        }
    }
}
